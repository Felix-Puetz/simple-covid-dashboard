{"version":3,"sources":["api/disease-sh/CoronaApi.ts","components/CountryForm.tsx","components/LoadingDot.tsx","components/StickyFooter.tsx","components/StickyHeader.tsx","components/Widget.tsx","components/WidgetsContainer.tsx","tools/toaster.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["coronaApi","axios","this","create","baseURL","get","country","CountryForm","props","initialCountry","onSubmit","useState","setCountry","e","preventDefault","className","type","placeholder","aria-label","value","onChange","target","LoadingDot","StickyFooter","year","Date","getFullYear","StickyHeader","Widget","title","content","numbro","format","thousandSeparated","WidgetsContainer","widgets","map","widget","i","toaster","Notyf","position","y","x","duration","dismissible","App","worldwideData","setWorldwideData","countryData","setCountryData","useEffect","a","byCountry","response","data","error","fetchByCountry","worldwide","fetchWorldwide","countryWidgets","todayCases","todayDeaths","todayRecovered","cases","deaths","recovered","worldwideWidgets","countryInfo","flag","src","alt","newCountry","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2ecff9c.chunk.js","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\nimport { CoronaByCountry, CoronaWorldWide } from \"./types\";\n\nexport class CoronaApi {\n  private readonly axios: AxiosInstance;\n\n  constructor() {\n    this.axios = axios.create({\n      baseURL: \"https://disease.sh/v3/covid-19\",\n    });\n  }\n\n  worldwide() {\n    return this.axios.get<CoronaWorldWide>(`/all`);\n  }\n\n  byCountry(country: string) {\n    return this.axios.get<CoronaByCountry>(`/countries/${country}`);\n  }\n}\n\nexport const coronaApi = new CoronaApi();\n","import React, { useState } from \"react\";\n\nexport interface CountryFormProps {\n  initialCountry: string;\n  onSubmit: (newCountry: string) => void;\n}\n\nexport function CountryForm(props: CountryFormProps) {\n  const { initialCountry, onSubmit } = props;\n\n  const [country, setCountry] = useState<string>(initialCountry);\n\n  const onCountryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCountry(e.target.value);\n  };\n\n  const onFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(country);\n  };\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <div></div>\n      <div className=\"flex items-center border-b border-teal-500 py-2\">\n        <input\n          className=\"appearance-none bg-transparent border-none w-full text-gray-300 mr-3 py-1 px-2 leading-tight focus:outline-none\"\n          type=\"text\"\n          placeholder=\"Country\"\n          aria-label=\"Country\"\n          value={country}\n          onChange={onCountryChange}\n        />\n        <button\n          className=\"flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-2 text-white py-1 px-2 rounded\"\n          type=\"button\"\n        >\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n","export function LoadingDot() {\n  return (\n    <div className=\"loading-dot rounded-full bg-white opacity-75 animate-ping w-8 h-8\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n}\n","export function StickyFooter() {\n  const year = new Date().getFullYear();\n  \n  return (\n    <footer className=\"bottom-0 z-50 text-white text-lg bg-gray-800 p-2 border-t-2 text-right\">\n      &copy; {year} Felix PÃ¼tz\n    </footer>\n  );\n}\n","export function StickyHeader() {\n  return (\n    <header className=\"sticky top-0 z-50 text-white text-5xl text-center bg-gray-800 p-5 border-b\">\n      COVID-19 Dashboard\n    </header>\n  );\n}\n","import numbro from \"numbro\";\nimport { LoadingDot } from \"./LoadingDot\";\n\nexport interface WidgetProps {\n  title: string;\n  content?: number | string;\n}\n\nexport function Widget(props: WidgetProps) {\n  let { title, content } = props;\n\n  if (typeof content === \"number\") {\n    content = numbro(content).format({ thousandSeparated: true });\n  }\n\n  return (\n    <div className=\"widget flex flex-col items-center w-full border-2 p-5 shadow-lg transform rounded-lg duration-150 bg-gray-800 border-gray-400 hover:scale-105 transition\">\n      <h3 className=\"text-xl text-gray-300 border-b border-gray-600 py-2 px-10\">\n        {title}\n      </h3>\n      <div className=\"p-5 text-2xl text-gray-300\">\n        {content ? content : <LoadingDot />}\n      </div>\n    </div>\n  );\n}\n","import { Widget, WidgetProps } from \"./Widget\";\n\nexport interface WidgetsContainerProps {\n  title: string;\n  widgets: WidgetProps[];\n}\n\nexport function WidgetsContainer(props: WidgetsContainerProps) {\n  const { title, widgets } = props;\n\n  return (\n    <div\n      className={`\n      widgets-container \n      grid \n      grid-cols-3 \n      gap-4\n      my-10\n    `}\n    >\n      <h1 className={`col-span-3 text-3xl text-white px-3`}> {title} </h1>\n\n      {widgets.map((widget, i) => (\n        <Widget\n          title={widget.title}\n          content={widget.content}\n          key={`widget-${i}`}\n        />\n      ))}\n    </div>\n  );\n}\n","import { Notyf } from \"notyf\";\nimport \"notyf/notyf.min.css\";\n\nexport const toaster = new Notyf({\n  position: { y: \"top\", x: \"right\" },\n  duration: 5000,\n  dismissible: true,\n});\n","import React, { useEffect, useState } from \"react\";\nimport { coronaApi } from \"./api/disease-sh/CoronaApi\";\nimport { CoronaByCountry, CoronaWorldWide } from \"./api/disease-sh/types\";\nimport { CountryForm } from \"./components/CountryForm\";\nimport { LoadingDot } from \"./components/LoadingDot\";\nimport { StickyFooter } from \"./components/StickyFooter\";\nimport { StickyHeader } from \"./components/StickyHeader\";\nimport {\n  WidgetsContainer,\n  WidgetsContainerProps,\n} from \"./components/WidgetsContainer\";\nimport { toaster } from \"./tools/toaster\";\n\nfunction App() {\n  const [worldwideData, setWorldwideData] = useState<CoronaWorldWide>();\n  const [countryData, setCountryData] = useState<CoronaByCountry>();\n  const [country, setCountry] = useState<string>(\"Germany\");\n\n  useEffect(() => {\n    const fetchByCountry = async () => {\n      try {\n        const response = await coronaApi.byCountry(country);\n        setCountryData(response.data);\n      } catch (e) {\n        toaster.error(\n          `Could not fetch data for country: <strong>${country}</strong>`\n        );\n      }\n    };\n\n    fetchByCountry();\n  }, [country]);\n\n  useEffect(() => {\n    const fetchWorldwide = async () => {\n      try {\n        const response = await coronaApi.worldwide();\n        setWorldwideData(response.data);\n      } catch (e) {\n        toaster.error(`Failed to fetch worldwide data`);\n      }\n    };\n\n    fetchWorldwide();\n  }, []);\n\n  const onFormSubmit = (newCountry: string) => {\n    if (!newCountry || country === newCountry) return;\n\n    setCountryData(undefined);\n    setCountry(newCountry);\n  };\n\n  const countryWidgets: WidgetsContainerProps[] = [\n    {\n      title: `${countryData?.country || country} Today`,\n      widgets: [\n        { title: \"Cases\", content: countryData?.todayCases },\n        { title: \"Deaths\", content: countryData?.todayDeaths },\n        { title: \"Recovered\", content: countryData?.todayRecovered },\n      ],\n    },\n    {\n      title: `${countryData?.country || country} Total`,\n      widgets: [\n        { title: \"Cases\", content: countryData?.cases },\n        { title: \"Deaths\", content: countryData?.deaths },\n        { title: \"Recovered\", content: countryData?.recovered },\n      ],\n    },\n  ];\n\n  const worldwideWidgets: WidgetsContainerProps[] = [\n    {\n      title: \"Worldwide Today\",\n      widgets: [\n        { title: \"Cases\", content: worldwideData?.todayCases },\n        { title: \"Deaths\", content: worldwideData?.todayDeaths },\n        { title: \"Recovered\", content: worldwideData?.todayRecovered },\n      ],\n    },\n    {\n      title: \"Worldwide Total\",\n      widgets: [\n        { title: \"Cases\", content: worldwideData?.cases },\n        { title: \"Deaths\", content: worldwideData?.deaths },\n        { title: \"Recovered\", content: worldwideData?.recovered },\n      ],\n    },\n  ];\n\n  return (\n    <div className=\"App bg-gray-600\">\n      <StickyHeader />\n\n      <main className=\"Content w-full h-full relative p-5\">\n        <div className=\"grid grid-cols-2\">\n          <div className=\"p-5 flex flex-row\">\n            {countryData?.countryInfo?.flag ? (\n              <img\n                src={countryData?.countryInfo.flag}\n                alt={`flag-${country}`}\n                className=\"w-16\"\n              />\n            ) : (\n              <LoadingDot />\n            )}\n          </div>\n          <CountryForm initialCountry={country} onSubmit={onFormSubmit} />\n        </div>\n\n        {countryWidgets.map(({ title, widgets }) => (\n          <WidgetsContainer title={title} widgets={widgets} key={title} />\n        ))}\n\n        <hr />\n\n        {worldwideWidgets.map(({ title, widgets }) => (\n          <WidgetsContainer title={title} widgets={widgets} key={title} />\n        ))}\n      </main>\n\n      <StickyFooter />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./tools/toaster\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}